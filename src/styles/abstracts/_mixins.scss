@use './variables';
@use './color';
@use './scale-functions' as factors;

// mixins
@mixin border($color: transparent, $width: 1px, $style: solid) {
  border-width: $width;
  border-color: $color;
  border-style: $style;
  border-radius: variables.$border-radius;
}

@mixin borderTest() {
  border: 1px solid color.$errorColor;
}

@mixin boxShadow($color: color.get-color(black, 900)) {
  $alpha: 0.29;
  box-shadow: 0px 1px 1px rgba($color, $alpha), 0px 2px 2px rgba($color, $alpha), 0px 4px 4px rgba($color, $alpha),
    0px 8px 8px rgba($color, $alpha), 0px 16px 16px rgba($color, $alpha);
}

@mixin gradient($color) {
  background-image: linear-gradient(173deg,
      scale-color($color, $lightness: 10%) 0%,
      scale-color($color, $lightness: 15%) 10%,
      $color 62%,
      scale-color($color, $lightness: -15%) 90%,
      scale-color($color, $lightness: -10%) 100%);
}

@mixin paddingBox {
  padding: variables.$space-sm variables.$space-md;
}

/*
* @include triangle within a pseudo element and add positioning properties (ie. top, left)
* $direction: up, down, left, right
*/
@mixin triangle($direction, $size: 6px, $color: #222) {
  content: "";
  display: block;
  position: absolute;
  height: 0;
  width: 0;

  @if ($direction =="up") {
    border-bottom: $size solid $color;
    border-left: 1/2 * $size solid transparent;
    border-right: 1/2 * $size solid transparent;
  }

  @else if ($direction =="down") {
    border-top: $size solid $color;
    border-left: 1/2 * $size solid transparent;
    border-right: 1/2 * $size solid transparent;
  }

  @else if ($direction =="left") {
    border-top: 1/2 * $size solid transparent;
    border-bottom: 1/2 * $size solid transparent;
    border-right: $size solid $color;
  }

  @else if ($direction =="right") {
    border-top: 1/2 * $size solid transparent;
    border-bottom: 1/2 * $size solid transparent;
    border-left: $size solid $color;
  }
}

// Breakpoints for each query
$smartphone: 480px;
$tablet: 767px;
$tabletPortrait: 767px;
$tabletLandscape: 1024px;
$desktop: 1174px;
$largeScreen: 1400px;

@mixin respondTo($media) {
  @if $media ==smartphone {
    @media (min-width: $smartphone) {
      @content;
    }
  }

  @else if $media ==tablet {
    @media (min-width: $tabletPortrait) and (max-width: $tabletLandscape) {
      @content;
    }
  }

  @else if $media ==smallScreen {
    @media (max-width: $desktop) {
      @content;
    }
  }

  @else if $media ==desktop {
    @media (min-width: $desktop) {
      @content;
    }
  }
}

// Example usage div {
//   // regular styles here
//   @include respondTo(desktop) {
//     &:hover {
//       background: blue;
//     } // only add the hover effect on desktop browsers
//   }
// }

@mixin scrollbar {
  &::-webkit-scrollbar {
    width: factors.rem-scale(400);
    border: variables.$border;
    /* Mostly for vertical scrollbars */
  }

  &::-webkit-scrollbar-thumb {
    border-radius: variables.$border-radius;
    background: variables.$scrollbar-thumb-background;
  }

  &::-webkit-scrollbar-thumb:hover {
    background: variables.$scrollbar-thumb-background-hover;
  }

  &::-webkit-scrollbar-track {
    box-shadow: $box-shadow-inset;
    background: variables.$scrollbar-track-background;
  }
}

// region box-shadow ==========
$blur-factor: 3;
$box-shadow-inset: inset 0 0 factors.px-to-rem(3px) transparentize(color.get-color(black, 900), .76);

/**
 * Computes a top-shadow
 *
 * @param {Number} $depth - depth level
 *
 * @return {List}
 */
$top-shadow-offset-list: 2 4 6 8 10;
$top-shadow-blur-values: 2 3 4 5 6;
$top-shadow-transparency: .16 .14 .12 .07 .04;

//  $top-shadow-offset-list: 1.5 3 10 14 19;
//  $top-shadow-blur-values: 1.5 3 10 14 19;
//  $top-shadow-transparency: .12 .16 .19 .25 .30;
@function top-shadow($depth) {
  $primary-offset: nth($top-shadow-offset-list, $depth) * 1px;
  $blur: nth($top-shadow-blur-values, $depth) * $blur-factor + px;
  $color: rgba(black, nth($top-shadow-transparency, $depth));

  @return 0 $primary-offset $blur $color;
}

/**
 * Computes a bottom-shadow.
 *
 * @param {Number} $depth - depth level
 *
 * @return {List}
 */
$bottom-shadow-offset-list: 1 2 3 4 5;
$bottom-shadow-blur-values: 1 2 3 4 5;
$bottom-shadow-transparency: .18 .16 .14 .12 .07;

//  $offset-list: 1.5 3 6 10 15;
// $blur-values: 1 3 3 5 6;
// $transparency: .18 .23 .23 .22 .22;
@function bottom-shadow($depth) {
  $primary-offset: nth($bottom-shadow-offset-list, $depth) * 1px;
  $blur: nth($bottom-shadow-blur-values, $depth) * $blur-factor + px;
  $color: rgba(black, nth($bottom-shadow-transparency, $depth));

  @return 0 $primary-offset $blur $color;
}

/**
 * Box Shadow.
 *
 * @param {Number} $depth - depth level (between 1 and 5)
 *
 * @link https://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
 *
 * @requires {function} top-shadow
 * @requires {function} bottom-shadow
 */
@mixin shadow($depth) {
  @if $depth < 1 {
    box-shadow: none;
  }

  @else if $depth >5 {
    @warn "Invalid $depth `#{$depth}`.";
  }

  @else {
    box-shadow: top-shadow($depth), bottom-shadow($depth);
  }
}

// endregion box-shadow ==========