---
import ButtonGroup from "../UI/ButtonGroup/ButtonGroup";
import Button from "../UI/Button";
import { Icon } from "astro-icon/components";

import styles from "./contact-form.module.scss";
import sendingStyles from "./sending.module.scss";

interface Props {
  customHeader?: boolean;
  customHeaderContent?: string;
}

const { customHeader = false, customHeaderContent = "" } = Astro.props;

const CONTACT_ROUTE_URL = import.meta.env.CONTACT_ROUTE_URL;

const buttonText = {
  send: "Send Message",
  sendAnother: "Send Another Message",
  sendAgain: "Try Again",
  sending: "Sending...",
};
---

<form class={styles.contactForm} id="contactForm">
  {
    !customHeader ? (
      <>
        <h1>Contact</h1>
        <hr />
      </>
    ) : (
      <Fragment set:html={customHeaderContent} />
    )
  }

  <p id="directiveText">Send me a message!</p>

  <div>
    <label for="name">Name</label>
    <input id="name" name="name" required type="text" />
  </div>

  <div>
    <label for="email">Email</label>
    <input id="email" name="email" required type="email" />
  </div>

  <div>
    <label for="message">Message</label>
    <textarea id="message" name="message" required rows={6}></textarea>
  </div>

  <ButtonGroup>
    <Button type="submit">
      <div class={sendingStyles.sending} id="sending">
        <Icon name="tabler:mail" id="mail" />
      </div>
      <span id="sendButtonText">Send Message</span>
    </Button>
  </ButtonGroup>
</form>

<script define:vars={{ CONTACT_ROUTE_URL, buttonText }}>
  import gsap from "gsap";

  // Form elements
  const form = document.getElementById("contactForm");
  const directiveText = document.getElementById("directiveText");
  const sendButtonText = document.getElementById("sendButtonText");
  const nameInput = document.getElementById("name");
  const emailInput = document.getElementById("email");
  const messageInput = document.getElementById("message");
  const sendingIcon = document.getElementById("sending");
  const mailIcon = document.getElementById("mail");

  // Form state
  let formState = {
    dirty: true,
    submitting: false,
    success: false,
    error: false,
  };

  // Animation timeline
  let animationTimeline;

  // Handle form submission
  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    // Update form state
    formState = { ...formState, submitting: true, dirty: false };
    updateFormUI();

    // Start animation
    startSendingAnimation();

    // Get form data
    const message = {
      name: nameInput.value,
      email: emailInput.value,
      message: messageInput.value,
    };

    try {
      const response = await sendEmail(CONTACT_ROUTE_URL, message);

      if (response.status === "success") {
        formState = { ...formState, submitting: false, success: true };
        if (directiveText) directiveText.textContent = response.data.message;
        if (sendButtonText) sendButtonText.textContent = buttonText.sendAnother;
        resetForm();
      } else {
        throw new Error(response.error || "Unknown error");
      }
    } catch (error) {
      formState = { ...formState, submitting: false, error: true };
      if (directiveText) {
        directiveText.textContent = "There was a server error!";
        directiveText.classList.add("error");
      }
      if (sendButtonText) sendButtonText.textContent = buttonText.sendAgain;
    } finally {
      stopSendingAnimation();
      updateFormUI();
    }
  });

  // Send email function
  async function sendEmail(url = "", data = {}) {
    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json; charset=utf-8",
      },
      body: JSON.stringify(data),
    });
    return await response.json();
  }

  // Reset form function
  function resetForm() {
    if (messageInput) messageInput.value = "";
    formState = {
      ...formState,
      dirty: true,
      success: false,
      error: false,
    };
  }

  // Update UI based on form state
  function updateFormUI() {
    const inputs = [nameInput, emailInput, messageInput];

    // Disable/enable inputs
    inputs.forEach((input) => {
      if (input) input.disabled = formState.submitting;
    });

    // Update error class
    if (directiveText) {
      if (formState.error) {
        directiveText.classList.add("error");
      } else {
        directiveText.classList.remove("error");
      }
    }
  }

  // Animation functions
  function startSendingAnimation() {
    if (!mailIcon) return;

    const xDuration = 1.5;
    animationTimeline = gsap.timeline({
      repeat: -1,
    });

    animationTimeline.to(
      mailIcon,
      {
        rotation: 360,
        duration: xDuration / 2,
        ease: "none",
        repeat: 3,
      },
      "<",
    );

    animationTimeline.to(
      mailIcon,
      {
        scale: 1.29,
        duration: xDuration / 2,
        yoyo: true,
        repeat: 3,
        ease: "none",
      },
      "<",
    );

    if (sendButtonText) sendButtonText.textContent = buttonText.sending;
  }

  function stopSendingAnimation() {
    if (animationTimeline) {
      animationTimeline.kill();
    }

    if (mailIcon) {
      gsap.set(mailIcon, {
        rotation: 0,
        scale: 1,
      });
    }
  }
</script>
