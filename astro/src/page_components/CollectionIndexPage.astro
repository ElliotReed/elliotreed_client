---
import { getCollection, type CollectionEntry } from "astro:content";
import { Image } from "astro:assets";
import Heading from "@/components/Heading/Heading";
import MainLayoutGrid from "@/components/MainLayoutGrid.astro";
import Card from "@/components/UI/Card.astro";
import Paragraph from "@/components/UI/Paragraph.astro";
import MainLayout from "@/layouts/MainLayout.astro";

const { collectionName, title, description } = Astro.props;
const articles = await getCollection(collectionName);

// Create a typed map: Record<string, CollectionEntry<"articles">[]>
const grouped: Record<string, CollectionEntry<typeof collectionName>[]> = {};

for (const article of articles) {
    const category = article.data.category;

    // Skip index files (those that don't have a slash in their slug)
    if (!article.slug.includes("/")) {
        continue;
    }

    if (!grouped[category]) {
        grouped[category] = [];
    }

    grouped[category].push(article);
}
---

<MainLayout title={title} description={description}>
    <MainLayoutGrid style="prefered-width">
        <Heading level={1}>{title}</Heading>

        <!-- <TagList /> -->

        {
            Object.entries(grouped).map(([category, items]) => (
                <section class="category">
                    <Heading level={2} size={5}>
                        <a
                            class="category-link"
                            href={`/${collectionName}/${category}`}
                        >
                            {category}
                        </a>
                    </Heading>

                    <ul>
                        {items.map((article) => (
                            <li>
                                <Card
                                    href={`/${collectionName}/${article.slug}`}
                                >
                                    {article.data.cover && (
                                        <Image
                                            class="cover"
                                            slot="header"
                                            src={article.data.cover}
                                            alt={article.data.title}
                                            layout="full-width"
                                        />
                                    )}
                                    <Fragment slot="content" class="content">
                                        <Heading level={3}>
                                            {article.data.title}
                                        </Heading>
                                        <Paragraph size="sm">
                                            {article.data.description}
                                        </Paragraph>
                                    </Fragment>
                                </Card>
                            </li>
                        ))}
                    </ul>
                </section>
            ))
        }
    </MainLayoutGrid>
</MainLayout>

<style lang="scss">
    @use "@/styles/abstracts" as *;
    .category {
        background: get-color("lightShades", 300);
        border-radius: $border-radius;
        @include padding-box("sm");
        @include shadow(1);
        & + section {
            margin-block: $space-lg;
        }

        .category-link {
            display: inline-block;
            width: 100%;
            color: inherit;

            &:visited {
                color: inherit;
            }
        }
    }

    ul {
        display: grid;
        padding-inline-start: $space-sm;
        grid-template-columns: repeat(auto-fill, minmax(px-to-rem(300), 1fr));
        gap: $space-md;
        list-style: none;
    }

    .cover {
        width: 100%;
        height: 12em;
        object-fit: cover;
        aspect-ratio: 16 / 9;
    }
</style>
