---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import { Image } from "astro:assets";

import MainLayout from "@/layouts/MainLayout.astro";
import Paragraph from "@/components/UI/Paragraph.astro";
import MaxWidthContainer from "@/components/UI/MaxWidthContainer.astro";
import Card from "@/components/UI/Card.astro";
import Heading from "@/components/Heading/Heading";
import TagList from "@/components/TagList.astro";

const articles = await getCollection("singing");

// Create a typed map: Record<string, CollectionEntry<"articles">[]>
const grouped: Record<string, CollectionEntry<"singing">[]> = {};

for (const article of articles) {
    const category = article.data.category;

    // Skip index files (those that don't have a slash in their slug)
    if (!article.slug.includes("/")) {
        continue;
    }

    if (!grouped[category]) {
        grouped[category] = [];
    }

    grouped[category].push(article);
}
---

<MainLayout
    title="Singing"
    description="A collection of singing-related articles and resources."
>
    <MaxWidthContainer>
        <Heading level={1}>Singing</Heading>

        <TagList />

        {
            Object.entries(grouped).map(([category, items]) => (
                <section class="category">
                    <Heading level={2}>
                        <a class="category-link" href={`/singing/${category}`}>
                            {category}
                        </a>
                    </Heading>

                    <ul>
                        {items.map((article) => (
                            <li>
                                <Card href={`/singing/${article.slug}`}>
                                    {article.data.cover && (
                                        <Image
                                            class="cover"
                                            slot="header"
                                            src={article.data.cover}
                                            alt={article.data.title}
                                            layout="full-width"
                                        />
                                    )}
                                    <Fragment slot="content" class="content">
                                        <Heading level={3}>
                                            {article.data.title}
                                        </Heading>
                                        <Paragraph size="sm">
                                            {article.data.description}
                                        </Paragraph>
                                    </Fragment>
                                </Card>
                            </li>
                        ))}
                    </ul>
                </section>
            ))
        }
    </MaxWidthContainer>

    <style lang="scss">
        @use "@/styles/abstracts" as *;
        .category {
            background: get-color("lightShades", 300);
            border-radius: $border-radius;
            @include padding-box("sm");
            @include shadow(1);
            & + section {
                margin-block: $space-lg;
            }

            .category-link {
                display: inline-block;
                width: 100%;
                color: inherit;

                &:visited {
                    color: inherit;
                }
            }
        }

        ul {
            display: grid;
            padding-inline-start: $space-sm;
            grid-template-columns: repeat(
                auto-fill,
                minmax(px-to-rem(300), 1fr)
            );
            gap: $space-md;
            list-style: none;
        }

        .cover {
            width: 100%;
            height: 12em;
            object-fit: cover;
            aspect-ratio: 16 / 9;
        }
    </style>
</MainLayout>
